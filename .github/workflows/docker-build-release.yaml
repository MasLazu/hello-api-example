name: Docker Build, Push, and Deploy

on:
  release:
    types: [published]

jobs:
  publish:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/hello-service
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha
          labels: |
            maintainer=MyTeam

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to VM
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy to VM
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/hello-service:latest
          VM_USER: ${{ secrets.VM_USER }}
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # Create .env file
          echo "DOCKER_IMAGE=$DOCKER_IMAGE" > .env

          # Copy files to VM
          sshpass -p "$VM_PASSWORD" scp -o StrictHostKeyChecking=no docker-compose.yml .env $VM_USER@$VM_HOST:~/

          # Execute deployment commands
          sshpass -p "$VM_PASSWORD" ssh -o StrictHostKeyChecking=no $VM_USER@$VM_HOST "
            echo '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            docker-compose pull
            docker-compose down
            docker-compose up -d
          "

          # Clean up unused images
          echo 'Cleaning up old images...'
          docker image prune -af --filter 'label=com.docker.compose.project=hello-api'
          docker image prune -af --filter 'dangling=true'
